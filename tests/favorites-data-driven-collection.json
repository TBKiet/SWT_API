{
  "info": {
    "name": "Favorites API Data-Driven Tests",
    "description": "Data-driven tests for Favorites API using CSV test data",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "item": [
    {
      "name": "POST /favorites - Data-Driven Test",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Ensure we have a valid token for authenticated tests",
              "const testScenario = pm.iterationData.get('test_scenario');",
              "if (testScenario.includes('authenticated') && !pm.environment.get('user_token')) {",
              "    console.log('Warning: No user token found for authenticated test');",
              "}"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "const expectedStatus = parseInt(pm.iterationData.get('expected_status'));",
              "const testScenario = pm.iterationData.get('test_scenario');",
              "const description = pm.iterationData.get('description');",
              "const productId = pm.iterationData.get('product_id');",
              "",
              "pm.test(`${description} - Status Code`, function () {",
              "    pm.expect(pm.response.code).to.equal(expectedStatus);",
              "});",
              "",
              "pm.test(`${description} - Response Time`, function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(5000);",
              "});",
              "",
              "pm.test(`${description} - Content Type`, function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "if (expectedStatus === 201) {",
              "    pm.test(`${description} - Successful Creation Response`, function () {",
              "        const json = pm.response.json();",
              "        pm.expect(json).to.have.property('message');",
              "        pm.expect(json).to.have.property('data');",
              "        pm.expect(json.data).to.have.property('id');",
              "        pm.expect(json.data).to.have.property('product_id');",
              "        pm.expect(json.data).to.have.property('user_id');",
              "    });",
              "    ",
              "    pm.test(`${description} - Product ID Matches`, function () {",
              "        const json = pm.response.json();",
              "        if (productId && productId !== '') {",
              "            pm.expect(json.data.product_id).to.equal(parseInt(productId));",
              "        }",
              "    });",
              "    ",
              "    // Store favorite ID for potential cleanup",
              "    const json = pm.response.json();",
              "    if (json.data && json.data.id) {",
              "        pm.environment.set('last_favorite_id', json.data.id.toString());",
              "    }",
              "} else if (expectedStatus === 401) {",
              "    pm.test(`${description} - Unauthorized Response`, function () {",
              "        const json = pm.response.json();",
              "        pm.expect(json).to.have.property('message');",
              "        pm.expect(json.message.toLowerCase()).to.include('unauth');",
              "    });",
              "} else if (expectedStatus === 400 || expectedStatus === 422) {",
              "    pm.test(`${description} - Validation Error Response`, function () {",
              "        const json = pm.response.json();",
              "        pm.expect(json).to.have.property('message');",
              "    });",
              "} else if (expectedStatus === 404) {",
              "    pm.test(`${description} - Not Found Response`, function () {",
              "        const json = pm.response.json();",
              "        pm.expect(json).to.have.property('message');",
              "    });",
              "}",
              "",
              "// Security test validations",
              "if (testScenario.includes('security')) {",
              "    pm.test(`${description} - No SQL Error Exposed`, function () {",
              "        const responseText = pm.response.text().toLowerCase();",
              "        pm.expect(responseText).to.not.include('sql');",
              "        pm.expect(responseText).to.not.include('mysql');",
              "        pm.expect(responseText).to.not.include('syntax error');",
              "    });",
              "    ",
              "    pm.test(`${description} - No Script Execution`, function () {",
              "        const responseText = pm.response.text();",
              "        pm.expect(responseText).to.not.include('<script>');",
              "        pm.expect(responseText).to.not.include('javascript:');",
              "    });",
              "}",
              "",
              "console.log(`Test: ${testScenario}, Product ID: ${productId}, Expected: ${expectedStatus}, Actual: ${pm.response.code}`);"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {"key": "Accept", "value": "application/json"},
          {"key": "Content-Type", "value": "application/json"},
          {"key": "Authorization", "value": "{{auth_header}}"}
        ],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}"
        },
        "url": {
          "raw": "{{base_url}}/favorites",
          "host": ["{{base_url}}"],
          "path": ["favorites"]
        }
      }
    }
  ]
}
