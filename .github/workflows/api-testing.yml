name: API Testing CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    
    services:
      # Start the API service
      api:
        image: node:18-alpine
        ports:
          - 8091:8091
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: sprint5-with-bugs/API/package-lock.json
    
    - name: Install Newman CLI
      run: npm install -g newman newman-reporter-html
      
    - name: Setup Docker
      uses: docker/setup-buildx-action@v3
      
    - name: Install docker-compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
      
    - name: Start API services with Docker Compose
      run: |
        cd sprint5-with-bugs
        docker-compose up -d
        # Wait for services to be ready
        sleep 30
        
    - name: Verify API is running
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8091/health || curl -f http://localhost:8091/api/health || curl -f http://localhost:8091; do sleep 2; done'
        echo "API service is ready"
        
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Run User Authentication Tests
      run: |
        newman run tests/users-data-driven-collection.json \
          -e tests/environment.json \
          -d tests/users-test-data.csv \
          -r cli,html \
          --reporter-html-export reports/users-test-report.html
      continue-on-error: true
      
    - name: Run Brand API Tests  
      run: |
        newman run tests/brands-data-driven-collection.json \
          -e tests/environment.json \
          -d tests/brands-test-data.csv \
          -r cli,html \
          --reporter-html-export reports/brands-test-report.html
      continue-on-error: true
      
    - name: Run Favorites API Tests
      run: |
        newman run tests/favorites-data-driven-collection.json \
          -e tests/environment.json \
          -d tests/favorites-test-data.csv \
          -r cli,html \
          --reporter-html-export reports/favorites-test-report.html
      continue-on-error: true
      
    - name: Generate Combined Test Report
      run: |
        echo "# API Test Results Summary" > test-summary.md
        echo "Generated on: $(date)" >> test-summary.md
        echo "" >> test-summary.md
        echo "## Test Execution Status" >> test-summary.md
        echo "- Users API Tests: $([ -f reports/users-test-report.html ] && echo 'Completed' || echo 'Failed')" >> test-summary.md
        echo "- Brands API Tests: $([ -f reports/brands-test-report.html ] && echo 'Completed' || echo 'Failed')" >> test-summary.md  
        echo "- Favorites API Tests: $([ -f reports/favorites-test-report.html ] && echo 'Completed' || echo 'Failed')" >> test-summary.md
        echo "" >> test-summary.md
        echo "## Test Reports" >> test-summary.md
        echo "Individual test reports are available in the artifacts." >> test-summary.md
        
    - name: Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-reports-${{ github.run_number }}
        path: |
          reports/*.html
          test-summary.md
          Bug_Report_Final_22127188.csv
          Test_Case_Report_Updated_22127188.csv
        retention-days: 30
        
    - name: Upload Test Documentation
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-documentation-${{ github.run_number }}
        path: |
          *.md
          *.csv
          22127188_BugReport.xlsx - Legend.csv
        retention-days: 30
        
    - name: Comment Test Results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let summary = 'Test Summary not found';
          try {
            summary = fs.readFileSync('test-summary.md', 'utf8');
          } catch (e) {
            summary = '❌ Test execution failed - check logs for details';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🧪 API Test Results\n\n${summary}\n\n📊 Full reports available in workflow artifacts.`
          });
          
    - name: Cleanup
      if: always()
      run: |
        cd sprint5-with-bugs
        docker-compose down -v
        
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run API Collection Validation
      run: |
        # Validate JSON structure of Postman collections
        for collection in tests/*collection.json; do
          echo "Validating $collection"
          if ! jq empty "$collection" 2>/dev/null; then
            echo "❌ Invalid JSON in $collection"
            exit 1
          else
            echo "✅ $collection is valid JSON"
          fi
        done
        
    - name: Validate Test Data CSV Files
      run: |
        # Check CSV files exist and have proper headers
        for csvfile in tests/*.csv; do
          if [ -f "$csvfile" ]; then
            echo "✅ Found $csvfile"
            head -1 "$csvfile"
          else
            echo "❌ Missing $csvfile"
          fi
        done
        
    - name: Security Scan for Sensitive Data
      run: |
        echo "🔍 Scanning for sensitive data patterns..."
        # Check for potential secrets in test files
        if grep -r -i "password.*:" tests/ --include="*.json" --include="*.csv" | grep -v "welcome01\|password123\|testpass"; then
          echo "⚠️ Potential sensitive data found in test files"
        else
          echo "✅ No sensitive data patterns detected"
        fi
        
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [api-tests, quality-checks]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Create Documentation Site
      run: |
        mkdir -p docs
        cp README.md docs/index.md
        cp API_Test_Case_Design_Report.md docs/
        cp Personal_Report_22127188.md docs/
        
        # Create index.html for GitHub Pages
        cat > docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>SWT API Testing Documentation</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                h1 { color: #333; }
                .nav { background: #f4f4f4; padding: 20px; margin-bottom: 20px; }
                .nav a { margin-right: 20px; text-decoration: none; color: #007acc; }
            </style>
        </head>
        <body>
            <h1>🧪 SWT API Testing Project</h1>
            <div class="nav">
                <a href="index.md">README</a>
                <a href="API_Test_Case_Design_Report.md">Test Case Design</a>
                <a href="Personal_Report_22127188.md">Personal Report</a>
            </div>
            <p>Welcome to the SWT API Testing documentation.</p>
            <p>This project contains comprehensive API testing suites with automated CI/CD pipeline.</p>
        </body>
        </html>
        EOF
        
    - name: Deploy to GitHub Pages
      uses: actions/deploy-pages@v4
      with:
        path: docs
