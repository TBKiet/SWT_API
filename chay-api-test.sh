#!/bin/bash

# ==============================================================================
# Script Ch·∫°y API Testing T·ª± ƒê·ªông - Phi√™n b·∫£n Ti·∫øng Vi·ªát
# ==============================================================================
# T√°c gi·∫£: API Testing Team
# M√¥ t·∫£: Script t·ª± ƒë·ªông ch·∫°y c√°c test suite API v·ªõi Newman
# H·ªó tr·ª£: Brands, Users, Favorites APIs
# ==============================================================================

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
GRAY='\033[0;37m'
NC='\033[0m' # No Color

# Bi·ªÉu t∆∞·ª£ng
CHECK_MARK="‚úÖ"
CROSS_MARK="‚ùå"
WARNING="‚ö†Ô∏è"
ROCKET="üöÄ"
GEAR="‚öôÔ∏è"
REPORT="üìä"
BUG="üêõ"

echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${CYAN}‚ïë                    ${ROCKET} API TESTING AUTOMATION ${ROCKET}                    ‚ïë${NC}"
echo -e "${CYAN}‚ïë                        Script Ti·∫øng Vi·ªát                      ‚ïë${NC}"
echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""

# Ki·ªÉm tra Newman
check_newman() {
    echo -e "${BLUE}${GEAR} Ki·ªÉm tra Newman...${NC}"
    if ! command -v newman &> /dev/null; then
        echo -e "${YELLOW}${WARNING} Newman ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!${NC}"
        echo -e "${CYAN}${GEAR} ƒêang c√†i ƒë·∫∑t Newman v√† HTML reporter...${NC}"
        npm install -g newman newman-reporter-htmlextra
        echo -e "${GREEN}${CHECK_MARK} Newman ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng!${NC}"
    else
        echo -e "${GREEN}${CHECK_MARK} Newman ƒë√£ s·∫µn s√†ng!${NC}"
    fi
    echo ""
}

# T·∫°o th∆∞ m·ª•c reports
create_reports_dir() {
    if [ ! -d "reports" ]; then
        mkdir -p reports
        echo -e "${GREEN}${CHECK_MARK} ƒê√£ t·∫°o th∆∞ m·ª•c reports/${NC}"
    fi
}

# Ki·ªÉm tra API server
check_api_server() {
    echo -e "${BLUE}${GEAR} Ki·ªÉm tra k·∫øt n·ªëi API server...${NC}"
    
    # ƒê·ªçc URL t·ª´ environment.json
    if [ -f "tests/environment.json" ]; then
        API_BASE_URL=$(grep -o '"baseUrl": "[^"]*"' tests/environment.json | grep -o 'http[^"]*')
        echo -e "${CYAN}API Base URL: ${API_BASE_URL}${NC}"
        
        # Test c√°c endpoint ch√≠nh
        endpoints=("/status" "/products" "/brands")
        
        for endpoint in "${endpoints[@]}"; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "${API_BASE_URL}${endpoint}" 2>/dev/null || echo "000")
            if [ "$response" = "200" ]; then
                echo -e "${GREEN}${CHECK_MARK} ${endpoint}: ${response}${NC}"
            elif [ "$response" = "401" ] || [ "$response" = "404" ]; then
                echo -e "${YELLOW}${WARNING} ${endpoint}: ${response} (Y√™u c·∫ßu x√°c th·ª±c ho·∫∑c kh√¥ng t√¨m th·∫•y)${NC}"
            else
                echo -e "${RED}${CROSS_MARK} ${endpoint}: ${response} (L·ªói k·∫øt n·ªëi)${NC}"
            fi
        done
    else
        echo -e "${RED}${CROSS_MARK} Kh√¥ng t√¨m th·∫•y file environment.json${NC}"
    fi
    echo ""
}

# Ch·∫°y test suite
run_test_suite() {
    local collection=$1
    local data_file=$2
    local report_name=$3
    local description=$4
    
    echo -e "${MAGENTA}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${MAGENTA}${ROCKET} CH·∫†Y TEST: ${description}${NC}"
    echo -e "${MAGENTA}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    
    if [ ! -f "$collection" ]; then
        echo -e "${RED}${CROSS_MARK} Kh√¥ng t√¨m th·∫•y collection: $collection${NC}"
        return 1
    fi
    
    if [ ! -f "$data_file" ]; then
        echo -e "${RED}${CROSS_MARK} Kh√¥ng t√¨m th·∫•y data file: $data_file${NC}"
        return 1
    fi
    
    # Ch·∫°y Newman v·ªõi b√°o c√°o HTML
    newman run "$collection" \
        -e "tests/environment.json" \
        -d "$data_file" \
        --reporters cli,htmlextra \
        --reporter-htmlextra-export "reports/${report_name}.html" \
        --reporter-htmlextra-title "B√°o C√°o Test API - ${description}" \
        --reporter-htmlextra-logs \
        --color on
    
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo -e "${GREEN}${CHECK_MARK} Test ${description} ho√†n th√†nh th√†nh c√¥ng!${NC}"
    else
        echo -e "${YELLOW}${WARNING} Test ${description} ho√†n th√†nh v·ªõi m·ªôt s·ªë l·ªói!${NC}"
    fi
    
    echo -e "${CYAN}${REPORT} B√°o c√°o HTML: reports/${report_name}.html${NC}"
    echo ""
    
    return $exit_code
}

# Hi·ªÉn th·ªã menu
show_menu() {
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë                    ${GEAR} MENU L·ª∞A CH·ªåN ${GEAR}                         ‚ïë${NC}"
    echo -e "${CYAN}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£${NC}"
    echo -e "${CYAN}‚ïë  1. Ch·∫°y t·∫•t c·∫£ test suites                                 ‚ïë${NC}"
    echo -e "${CYAN}‚ïë  2. Ch·∫°y test Brands API                                    ‚ïë${NC}"
    echo -e "${CYAN}‚ïë  3. Ch·∫°y test Users API                                     ‚ïë${NC}"
    echo -e "${CYAN}‚ïë  4. Ch·∫°y test Favorites API                                 ‚ïë${NC}"
    echo -e "${CYAN}‚ïë  5. Ki·ªÉm tra k·∫øt n·ªëi API server                             ‚ïë${NC}"
    echo -e "${CYAN}‚ïë  6. Xem b√°o c√°o trong tr√¨nh duy·ªát                           ‚ïë${NC}"
    echo -e "${CYAN}‚ïë  0. Tho√°t                                                   ‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

# Ch·∫°y t·∫•t c·∫£ tests
run_all_tests() {
    echo -e "${GREEN}${ROCKET} CH·∫†Y T·∫§T C·∫¢ TEST SUITES${NC}"
    echo ""
    
    local total_tests=0
    local failed_tests=0
    
    # Test Brands API
    if run_test_suite "tests/brands-data-driven-collection.json" "tests/brands-test-data.csv" "brands-test-report" "Brands API"; then
        ((total_tests++))
    else
        ((total_tests++))
        ((failed_tests++))
    fi
    
    # Test Users API
    if run_test_suite "tests/users-data-driven-collection.json" "tests/users-test-data.csv" "users-test-report" "Users API"; then
        ((total_tests++))
    else
        ((total_tests++))
        ((failed_tests++))
    fi
    
    # Test Favorites API
    if run_test_suite "tests/favorites-data-driven-collection.json" "tests/favorites-test-data.csv" "favorites-test-report" "Favorites API"; then
        ((total_tests++))
    else
        ((total_tests++))
        ((failed_tests++))
    fi
    
    # T√≥m t·∫Øt k·∫øt qu·∫£
    echo -e "${MAGENTA}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${MAGENTA}${REPORT} T√ìM T·∫ÆT K·∫æT QU·∫¢ TEST${NC}"
    echo -e "${MAGENTA}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${CYAN}T·ªïng s·ªë test suites: ${total_tests}${NC}"
    echo -e "${GREEN}Test suites th√†nh c√¥ng: $((total_tests - failed_tests))${NC}"
    echo -e "${RED}Test suites c√≥ l·ªói: ${failed_tests}${NC}"
    
    if [ $failed_tests -eq 0 ]; then
        echo -e "${GREEN}${CHECK_MARK} T·∫•t c·∫£ test suites ƒë√£ ch·∫°y th√†nh c√¥ng!${NC}"
    else
        echo -e "${YELLOW}${WARNING} C√≥ ${failed_tests} test suite(s) g·∫∑p l·ªói. Vui l√≤ng ki·ªÉm tra b√°o c√°o chi ti·∫øt.${NC}"
    fi
    
    echo ""
    echo -e "${CYAN}${REPORT} C√°c b√°o c√°o HTML ƒë√£ ƒë∆∞·ª£c t·∫°o trong th∆∞ m·ª•c reports/${NC}"
}

# M·ªü b√°o c√°o trong tr√¨nh duy·ªát
open_reports() {
    echo -e "${BLUE}${REPORT} M·ªü b√°o c√°o trong tr√¨nh duy·ªát...${NC}"
    
    if [ -d "reports" ]; then
        echo -e "${CYAN}C√°c b√°o c√°o c√≥ s·∫µn:${NC}"
        ls -la reports/*.html 2>/dev/null || echo -e "${YELLOW}${WARNING} Ch∆∞a c√≥ b√°o c√°o n√†o ƒë∆∞·ª£c t·∫°o!${NC}"
        
        # M·ªü b√°o c√°o g·∫ßn nh·∫•t
        latest_report=$(ls -t reports/*.html 2>/dev/null | head -1)
        if [ -n "$latest_report" ]; then
            echo -e "${GREEN}${CHECK_MARK} ƒêang m·ªü b√°o c√°o: $latest_report${NC}"
            open "$latest_report" 2>/dev/null || echo -e "${YELLOW}${WARNING} Kh√¥ng th·ªÉ m·ªü tr√¨nh duy·ªát t·ª± ƒë·ªông. Vui l√≤ng m·ªü file b√°o c√°o th·ªß c√¥ng.${NC}"
        fi
    else
        echo -e "${RED}${CROSS_MARK} Th∆∞ m·ª•c reports kh√¥ng t·ªìn t·∫°i!${NC}"
    fi
}

# Main function
main() {
    check_newman
    create_reports_dir
    
    while true; do
        show_menu
        echo -ne "${YELLOW}Vui l√≤ng ch·ªçn m·ªôt t√πy ch·ªçn (0-6): ${NC}"
        read -r choice
        echo ""
        
        case $choice in
            1)
                run_all_tests
                ;;
            2)
                run_test_suite "tests/brands-data-driven-collection.json" "tests/brands-test-data.csv" "brands-test-report" "Brands API"
                ;;
            3)
                run_test_suite "tests/users-data-driven-collection.json" "tests/users-test-data.csv" "users-test-report" "Users API"
                ;;
            4)
                run_test_suite "tests/favorites-data-driven-collection.json" "tests/favorites-test-data.csv" "favorites-test-report" "Favorites API"
                ;;
            5)
                check_api_server
                ;;
            6)
                open_reports
                ;;
            0)
                echo -e "${GREEN}${CHECK_MARK} C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng API Testing Script!${NC}"
                echo -e "${CYAN}${ROCKET} Ch√∫c b·∫°n c√≥ m·ªôt ng√†y t·ªët l√†nh!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}${CROSS_MARK} L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn t·ª´ 0-6.${NC}"
                ;;
        esac
        
        echo -e "${GRAY}Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...${NC}"
        read -r
        clear
    done
}

# Ch·∫°y script
main 